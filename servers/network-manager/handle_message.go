package networkmanager

import (
	tasks "TsunamiDB/servers/network-manager/tasks"
	types "TsunamiDB/types"
	"encoding/json"
	"log"

	"github.com/gorilla/websocket"
)

// read and execute on message
func handleMsg(peerAddr string, message []byte, nm *NetworkManager, conn *websocket.Conn) {
	var req types.NMmessage
	err := json.Unmarshal(message, &req)
	if err != nil {
		log.Println("ğŸ“Œ BÅ‚Ä…d parsowania wiadomoÅ›ci od", peerAddr, ":", err)
		return
	}

	// log.Println("ğŸ“Œ Otrzymano wiadomoÅ›Ä‡ od", peerAddr, ":", req)

	// ğŸ”¹ Ignorujemy odpowiedzi (Finished: true) - zapobiega pÄ™tli!
	if req.Finished {
		// log.Println("ğŸ“Œ IgnorujÄ™ wiadomoÅ›Ä‡, bo jest juÅ¼ oznaczona jako Finished")
		return
	}

	// ğŸ”¹ ObsÅ‚uga nowych Å¼Ä…daÅ„
	var res types.NMmessage
	switch req.Task {
	case "read":
		res = tasks.Read(req)
	case "save":
		res = tasks.Save(req)
	case "free":
		res = tasks.Free(req)
	default:
		log.Println("ğŸ“Œ Nieznane zadanie:", req.Task)
		return
	}

	// Przypisanie adresu IP serwera, ktÃ³ry odpowiada
	res.ReqSendBy = req.ReqSendBy // Nadawca Å¼Ä…dania
	res.ReqResBy = nm.ServerIP    // Ten serwer odpowiada
	res.Finished = true           // Oznaczamy jako zakoÅ„czone

	// Serializacja odpowiedzi do JSON
	responseJSON, err := json.Marshal(res)
	if err != nil {
		log.Println("ğŸ“Œ BÅ‚Ä…d serializacji odpowiedzi:", err)
		return
	}

	// BezpoÅ›rednie wysÅ‚anie odpowiedzi do klienta
	// log.Println("ğŸ“Œ WysyÅ‚am odpowiedÅº do", peerAddr)
	err = conn.WriteMessage(websocket.TextMessage, responseJSON)
	if err != nil {
		log.Println("ğŸ“Œ BÅ‚Ä…d wysyÅ‚ania do", peerAddr, ":", err)
	}
}
